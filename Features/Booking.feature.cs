// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace AutomatedTestFramework_Slk.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::NUnit.Framework.TestFixtureAttribute()]
    [global::NUnit.Framework.DescriptionAttribute("Booking Feature")]
    [global::NUnit.Framework.FixtureLifeCycleAttribute(global::NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class BookingFeatureFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en"), "Features", "Booking Feature", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
#line 1 "Booking.feature"
#line hidden
        
        [global::NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [global::NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        [global::NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [global::NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<global::NUnit.Framework.TestContext>(global::NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages("Features/Booking.feature.ndjson", 3);
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Successful Booking Creation and checkout")]
        [global::NUnit.Framework.TestCaseAttribute("Test", "Appointment", "Colouring", "Half Head Highlights", "30 Oct 2025", "Rob", "test@test.com", "0", null)]
        public async global::System.Threading.Tasks.Task SuccessfulBookingCreationAndCheckout(string clientName, string optionName, string serviceCategory, string serviceName, string serviceDate, string stylistName, string emailAddress, string @__pickleIndex, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("clientName", clientName);
            argumentsOfScenario.Add("optionName", optionName);
            argumentsOfScenario.Add("serviceCategory", serviceCategory);
            argumentsOfScenario.Add("serviceName", serviceName);
            argumentsOfScenario.Add("ServiceDate", serviceDate);
            argumentsOfScenario.Add("stylistName", stylistName);
            argumentsOfScenario.Add("emailAddress", emailAddress);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Successful Booking Creation and checkout", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 4
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
 await testRunner.GivenAsync("the user is on the Slick Calendar page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 6
 await testRunner.AndAsync("the user is logged into the application", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 7
 await testRunner.AndAsync("the user is able to view the booking page", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 8
 await testRunner.WhenAsync("the user clicks on the \"New\" button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
 await testRunner.AndAsync(string.Format("selects the \"{0}\" from the dropdown menu", optionName), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 10
 await testRunner.AndAsync(string.Format("enters \"{0}\" in the search box", clientName), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
 await testRunner.AndAsync(string.Format("selects the client \"{0}\" from the search results", clientName), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
 await testRunner.ThenAsync(string.Format("the user should see the list of services available for \"{0}\"", clientName), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 13
 await testRunner.WhenAsync(string.Format("the user selects the service \"{0}\" from the list", serviceCategory), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 14
 await testRunner.AndAsync(string.Format("the user selects the \"{0}\" from the available services", serviceName), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
 await testRunner.ThenAsync("the user should see the calendar and the option to select a stylist for booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 16
 await testRunner.WhenAsync("the user selects the calendar", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 17
 await testRunner.AndAsync(string.Format("chooses the desired date \"{0}\" for the booking and clicks \"Done\"", serviceDate), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
 await testRunner.ThenAsync(string.Format("the calendar should collapse and show the selected date \"{0}\"", serviceDate), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 19
 await testRunner.WhenAsync("the user clicks to select the stylist for the booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 20
 await testRunner.AndAsync("the user clicks on the \"More\" button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
 await testRunner.AndAsync("selects the available stylist from the list", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
 await testRunner.ThenAsync("the user should see the selected stylist displayed for the booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 23
 await testRunner.WhenAsync("the user clicks to select the time for the booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 24
 await testRunner.AndAsync("selects the desired time slot for the booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
 await testRunner.ThenAsync("the user should see the selected time displayed for the booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 26
 await testRunner.WhenAsync("the user clicks on the \"Save Booking\" button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 27
 await testRunner.ThenAsync("the user should see the booking displayed in the calendar view", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 28
 await testRunner.AndAsync("the sidebar should close automatically", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
 await testRunner.WhenAsync("the user clicks on the created booking in the calendar", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 30
 await testRunner.ThenAsync("the user should see the booking details displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 31
 await testRunner.WhenAsync("the user clicks on the \"Confirm\" button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 32
 await testRunner.ThenAsync("the booking status should change to \"Confirmed\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 33
 await testRunner.WhenAsync("the user clicks on the \"Checkout & Rebook\" button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 34
 await testRunner.ThenAsync("the modal for checkout or rebook should appear", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 35
 await testRunner.WhenAsync("the user clicks on the \"GO TO CHECKOUT\" button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 36
 await testRunner.ThenAsync("the user should see the checkout page with booking details", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 37
 await testRunner.WhenAsync("the user clicks on the \"Complete\" button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 38
 await testRunner.ThenAsync("the user should see the modal to confirm payment", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 39
 await testRunner.WhenAsync("the user clicks on the \"Confirm\" button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 40
 await testRunner.ThenAsync("the user should see the payment confirmation message", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 41
 await testRunner.AndAsync(string.Format("should view the modal to enter the email address \"{0}\" for receipt", emailAddress), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 42
 await testRunner.WhenAsync(string.Format("the user enters the email address \"{0}\"", emailAddress), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 43
 await testRunner.AndAsync("the user clicks on the \"Send Receipt\" button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 44
 await testRunner.ThenAsync(string.Format("the user should see a message confirming that the receipt has been sent to \"{0}\"", emailAddress), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 45
 await testRunner.WhenAsync("the user clicks on the \"Close\" button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 46
 await testRunner.ThenAsync("the user should be redirected to the calendar view", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 47
 await testRunner.WhenAsync("the user clicks on the booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 48
 await testRunner.ThenAsync("the sidebar should open displaying the booking details as checked out", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
